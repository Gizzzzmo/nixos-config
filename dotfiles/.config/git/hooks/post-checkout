#!/bin/sh
cd "$(git rev-parse --show-toplevel)" || echo "Can't cd into git root"
rev_abbrev=$(git rev-parse --abbrev-ref HEAD)
if [ "$rev_abbrev" = "HEAD" ]; then
    rev=$(git rev-parse HEAD)
else
    rev="$rev_abbrev"
fi


if [ -d "./build" ]; then
    if [ -L "./build/HEAD" ]; then
        rm ./build/HEAD
    fi
    if [ -f "./build/HEAD" ] || [ -d "./build/HEAD" ]; then
        echo "Can't create symlink for HEAD, path exists"
    else
        ln -s ./"$rev" ./build/HEAD
    fi

    if [ "$rev_abbrev" = "HEAD" ]; then
        # iterate over all tags pointing to $rev and create a symlink from ./build/$tag to ./build/$ref for each
        # uses while IFS to split the output of git tag --points-at $rev into lines
        git tag --points-at "$rev" | while IFS= read -r tag; do
            # if the tag name is also the name of a branch, skip it and print a warning
            if git show-ref --verify --quiet refs/heads/"$tag"; then
                echo "Warning: Tag $tag pointing to current commit is an ambiguous reference, not creating symlink for it"
                continue
            fi
            if [ -L "./build/$tag" ]; then
                rm ./build/"$tag"
            fi
            if [ -f "./build/$tag" ] || [ -d "./build/$tag" ]; then
                echo "Can't create symlink for tag $tag, path exists"
            else
                ln -s ./"$rev" ./build/"$tag" || true
            fi
        done
    fi

    # if ./build/$rev doesn't exist, create it
    if [ -f "./build/$rev" ]; then
        echo "Warning: ./build/$rev is a file, not creating directory."
    elif [ ! -d "./build/$rev" ]; then
        mkdir ./build/"$rev"
    fi

fi

if test -f build/CMakeProfiles.json; then
    jinja -D git_branch "$rev" build/CMakeProfiles.json >CMakeProfiles.json
fi

git submodule update --recursive
