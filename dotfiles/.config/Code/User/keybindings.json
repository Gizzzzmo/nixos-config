// Place your key bindings in this file to override the defaults
[
    {
        "key": "alt+w",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.action.toggleMaximizedPanel",
                "workbench.action.focusPanel"
            ]
        }
    },
    {
        "key": "alt+w",
        "command": "workbench.action.terminal.focus",
        "when": "panelMaximized && !terminalFocus"
    },
    {
        "key": "alt+w",
        "command": "runCommands",
        "args": {
            "commands": [
                "workbench.action.closePanel",
                "workbench.action.focusActiveEditorGroup"
            ]
        },
        "when": "panelMaximized && terminalFocus"
    },
    {
        "key": "alt+u",
        "command": "runCommands",
        "args": {
            "commands": [
                "undo",
                "extension.vim_escape"
            ]
        }
    },
    {
        "key": "alt-i",
        "command": "editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl-p",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "space f g",
        "command": "workbench.action.findInFiles",
        "when": "vim.mode === 'Normal' && editorTextFocus"
    },
    {
        "key": "space f f",
        "command": "workbench.action.quickOpen",
        "when": "vim.mode === 'Normal' && editorTextFocus"
    },
    {
        "key": "space z z",
        "command": "workbench.action.toggleZenMode",
        "when": "vim.mode === 'Normal' && editorTextFocus"
    },
    {
        "key": "space z z",
        "command": "workbench.action.exitZenMode",
        "when": "inZenMode && vim.mode ==='Normal' && editorFocusText"
    },
    {
        "key": "alt-\\",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "ctrl+b c",
        "command": "workbench.action.terminal.new"
    },
    {
        "key": "ctrl+b x",
        "command": "workbench.action.terminal.kill",
        "when": "terminalFocus"
    },
    {
        "key": "alt-u",
        "command": "workbench.action.terminal.scrollUpPage",
        "when": "terminalFocus"
    },
    {
        "key": "alt+d",
        "command": "workbench.action.terminal.scrollDownPage",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+b shift+5",
        "command": "workbench.action.terminal.split",
        "when": "terminalFocus"
    },
    {
        "key": "alt+h",
        "command": "workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus"
    },
    {
        "key": "alt+l",
        "command": "workbench.action.terminal.focusNextPane",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+b h",
        "command": "workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+b l",
        "command": "workbench.action.terminal.focusNextPane",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+f",
        "command": "acceptSelectedSuggestion",
        "when": "suggestWidgetVisible && textInputFocus && !editorReadonly"
    },
    {
        "key": "alt+f",
        "command": "editor.action.inlineSuggest.commit",
        "when": "inlineSuggestionVisible && textInputFocus && !editorReadonly"
    },
    {
        "key": "space k",
        "command": "editor.action.marker.prev",
        "when": "vim.mode === 'Normal' && editorTextFocus"
    },
    {
        "key": "space j",
        "command": "editor.action.marker.next",
        "when": "vim.mode === 'Normal' && editorTextFocus"
    },
    {
        "key": "ctrl+n",
        "command": "quickInput.next",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "down",
        "command": "-quickInput.next",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+p",
        "command": "quickInput.previous",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "up",
        "command": "-quickInput.previous",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "enter",
        "command": "-acceptSelectedSuggestion",
        "when": "acceptSuggestionOnEnter && suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "j",
        "command": "editor.action.scrollDownHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "down",
        "command": "-editor.action.scrollDownHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "k",
        "command": "editor.action.scrollUpHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "up",
        "command": "-editor.action.scrollUpHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+u",
        "command": "editor.action.pageUpHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "pageup",
        "command": "-editor.action.pageUpHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+d",
        "command": "editor.action.pageDownHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "pagedown",
        "command": "-editor.action.pageDownHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+[",
        "command": "editor.action.hideHover",
        "when": "editorHoverFocused"
    },
    {
        "key": "ctrl+[",
        "command": "editor.action.cancelSelectionAnchor",
        "when": "editorTextFocus && selectionAnchorSet"
    },
    {
        "key": "ctrl+[",
        "command": "workbench.action.chat.stopListening",
        "when": "voiceChatInProgress && scopedVoiceChatInProgress == 'editor' || voiceChatInProgress && scopedVoiceChatInProgress == 'inline' || voiceChatInProgress && scopedVoiceChatInProgress == 'quick' || voiceChatInProgress && scopedVoiceChatInProgress == 'view'"
    },
    {
        "key": "ctrl+[",
        "command": "editor.debug.action.closeExceptionWidget",
        "when": "exceptionWidgetVisible"
    },
    {
        "key": "ctrl+[",
        "command": "editor.action.inlineSuggest.hide",
        "when": "inInlineEditsPreviewEditor"
    },
    {
        "key": "ctrl+[",
        "command": "editor.action.inlineSuggest.hide",
        "when": "inlineEditIsVisible || inlineSuggestionVisible"
    },
    {
        "key": "ctrl+[",
        "command": "editor.action.hideColorPicker",
        "when": "standaloneColorPickerVisible"
    },
    {
        "key": "ctrl+[",
        "command": "inlineChat2.close",
        "when": "inlineChatHasEditsAgent && inlineChatVisible && !chatEdits.hasEditorModifications && !chatEdits.isRequestInProgress || inlineChatHasEditsAgent && inlineChatVisible && !chatEdits.isRequestInProgress && chatEdits.requestCount == '0'"
    },
    {
        "key": "ctrl+[",
        "command": "workbench.action.terminal.chat.close",
        "when": "chatIsEnabled && terminalChatFocus && terminalChatVisible || chatIsEnabled && terminalChatVisible && terminalFocus"
    },
    {
        "key": "ctrl+[",
        "command": "noteMultiCursor.exit",
        "when": "config.notebook.multiCursor.enabled && isNotebookMultiSelect && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "ctrl+[",
        "command": "notebook.cell.quitEdit",
        "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible && !inlineChatFocused"
    },
    {
        "key": "ctrl+[",
        "command": "notebook.cell.quitEdit",
        "when": "notebookEditorFocused && notebookOutputFocused"
    },
    {
        "key": "ctrl+[",
        "command": "notebook.cell.quitEdit",
        "when": "inputFocus && notebookEditorFocused && vim.active && !editorHasSelection && !editorHoverVisible && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+[",
        "command": "notifications.hideList",
        "when": "notificationCenterVisible"
    },
    {
        "key": "ctrl+[",
        "command": "settings.action.clearSearchResults",
        "when": "inSettingsEditor && inSettingsSearch"
    },
    {
        "key": "ctrl+[",
        "command": "settings.action.focusLevelUp",
        "when": "inSettingsEditor && !inSettingsJSONEditor && !inSettingsSearch"
    },
    {
        "key": "ctrl+[",
        "command": "search.action.focusQueryEditorWidget",
        "when": "inSearchEditor"
    },
    {
        "key": "ctrl+[",
        "command": "search.action.cancel",
        "when": "listFocus && searchViewletVisible && !inputFocus && !treestickyScrollFocused && searchState != '0'"
    },
    {
        "key": "ctrl+[",
        "command": "inlayHints.stopReadingLineWithHint",
        "when": "isReadingLineWithInlayHints"
    },
    {
        "key": "ctrl+[",
        "command": "workbench.action.terminal.clearSelection",
        "when": "terminalFocusInAny && terminalHasBeenCreated && terminalTextSelected && !terminalFindVisible || terminalFocusInAny && terminalProcessSupported && terminalTextSelected && !terminalFindVisible"
    },
    {
        "key": "ctrl+[",
        "command": "workbench.action.terminal.hideFind",
        "when": "terminalFindVisible && terminalFocusInAny && terminalHasBeenCreated || terminalFindVisible && terminalFocusInAny && terminalProcessSupported"
    },
    {
        "key": "ctrl+[",
        "command": "workbench.action.editorDictation.stop",
        "when": "editorDictation.inProgress"
    },
    {
        "key": "ctrl+[",
        "command": "welcome.goBack",
        "when": "inWelcome && activeEditor == 'gettingStartedPage'"
    },
    {
        "key": "ctrl+[",
        "command": "breadcrumbs.selectEditor",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+[",
        "command": "cancelLinkedEditingInput",
        "when": "LinkedEditingInputVisible && editorTextFocus"
    },
    {
        "key": "ctrl+[",
        "command": "cancelRenameInput",
        "when": "editorFocus && renameInputVisible"
    },
    {
        "key": "ctrl+[",
        "command": "cancelSelection",
        "when": "editorHasSelection && textInputFocus"
    },
    {
        "key": "ctrl+[",
        "command": "closeBreakpointWidget",
        "when": "breakpointWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+[",
        "command": "closeFindWidget",
        "when": "editorFocus && findWidgetVisible && !isComposing"
    },
    {
        "key": "ctrl+[",
        "command": "closeMarkersNavigation",
        "when": "editorFocus && markersNavigationVisible"
    },
    {
        "key": "ctrl+[",
        "command": "closeParameterHints",
        "when": "editorFocus && parameterHintsVisible"
    },
    {
        "key": "ctrl+[",
        "command": "closeQuickDiff",
        "when": "dirtyDiffVisible"
    },
    {
        "key": "ctrl+[",
        "command": "closeReferenceSearch",
        "when": "inReferenceSearchEditor && !config.editor.stablePeek"
    },
    {
        "key": "ctrl+[",
        "command": "closeReferenceSearch",
        "when": "editorTextFocus && referenceSearchVisible && !config.editor.stablePeek || referenceSearchVisible && !config.editor.stablePeek && !inputFocus"
    },
    {
        "key": "ctrl+[",
        "command": "closeReplaceInFilesWidget",
        "when": "replaceInputBoxFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+[",
        "command": "commentsClearFilterText",
        "when": "commentsFilterFocus"
    },
    {
        "key": "ctrl+[",
        "command": "diffEditor.exitCompareMove",
        "when": "comparingMovedCode"
    },
    {
        "key": "ctrl+[",
        "command": "editor.action.selectEditor",
        "when": "stickyScrollFocused"
    },
    {
        "key": "ctrl+[",
        "command": "editor.action.webvieweditor.hideFind",
        "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "ctrl+[",
        "command": "editor.action.webvieweditor.hideFind",
        "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "ctrl+[",
        "command": "editor.cancelOperation",
        "when": "cancellableOperation"
    },
    {
        "key": "ctrl+[",
        "command": "editor.closeCallHierarchy",
        "when": "callHierarchyVisible && !config.editor.stablePeek"
    },
    {
        "key": "ctrl+[",
        "command": "editor.closeTestPeek",
        "when": "testing.isInPeek && !config.editor.stablePeek || testing.isPeekVisible && !config.editor.stablePeek"
    },
    {
        "key": "ctrl+[",
        "command": "editor.closeTypeHierarchy",
        "when": "typeHierarchyVisible && !config.editor.stablePeek"
    },
    {
        "key": "ctrl+[",
        "command": "editor.closeTypeHierarchy",
        "when": "typeHierarchyVisible && !config.editor.stablePeek"
    },
    {
        "key": "ctrl+[",
        "command": "editor.gotoNextSymbolFromResult.cancel",
        "when": "hasSymbols"
    },
    {
        "key": "ctrl+[",
        "command": "editor.hideDropWidget",
        "when": "dropWidgetVisible"
    },
    {
        "key": "ctrl+[",
        "command": "editor.hidePasteWidget",
        "when": "pasteWidgetVisible"
    },
    {
        "key": "ctrl+[",
        "command": "extension.vim_escape",
        "when": "editorTextFocus && vim.active && !inDebugRepl"
    },
    {
        "key": "ctrl+[",
        "command": "filesExplorer.cancelCut",
        "when": "explorerResourceCut && filesExplorerFocus && foldersViewVisible && !inputFocus"
    },
    {
        "key": "ctrl+[",
        "command": "hideCodeActionWidget",
        "when": "codeActionMenuVisible"
    },
    {
        "key": "ctrl+[",
        "command": "hideSuggestWidget",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+[",
        "command": "inlineChat.close",
        "when": "inlineChatHasProvider && inlineChatVisible"
    },
    {
        "key": "ctrl+[",
        "command": "inlineChat.discardHunkChange",
        "when": "inlineChatHasProvider && inlineChatVisible && inlineChatResponseType == 'messagesAndEdits'"
    },
    {
        "key": "ctrl+[",
        "command": "inlineChat.hideHint",
        "when": "inlineChatShowingHint"
    },
    {
        "key": "ctrl+[",
        "command": "keybindings.editor.clearSearchResults",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "ctrl+[",
        "command": "keybindings.editor.rejectWhenExpression",
        "when": "inKeybindings && whenFocus && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+[",
        "command": "leaveEditorMessage",
        "when": "messageVisible"
    },
    {
        "key": "ctrl+[",
        "command": "leaveSnippet",
        "when": "inSnippetMode && textInputFocus"
    },
    {
        "key": "ctrl+[",
        "command": "list.clear",
        "when": "listFocus && listHasSelectionOrFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "ctrl+[",
        "command": "list.closeFind",
        "when": "listFocus && treeFindOpen"
    },
    {
        "key": "ctrl+[",
        "command": "notebook.cell.chat.acceptChanges",
        "when": "inlineChatFocused && notebookCellChatFocused && notebookChatUserDidEdit && !notebookCellEditorFocused"
    },
    {
        "key": "ctrl+[",
        "command": "notebook.cell.chat.discard",
        "when": "inlineChatFocused && notebookCellChatFocused && !notebookCellEditorFocused && !notebookChatUserDidEdit"
    },
    {
        "key": "ctrl+[",
        "command": "notebook.hideFind",
        "when": "notebookEditorFocused && notebookFindWidgetFocused"
    },
    {
        "key": "ctrl+[",
        "command": "notifications.hideToasts",
        "when": "notificationToastsVisible"
    },
    {
        "key": "ctrl+[",
        "command": "notifications.hideToasts",
        "when": "notificationFocus && notificationToastsVisible"
    },
    {
        "key": "ctrl+[",
        "command": "problems.action.clearFilterText",
        "when": "problemsFilterFocus"
    },
    {
        "key": "ctrl+[",
        "command": "removeSecondaryCursors",
        "when": "editorHasMultipleSelections && textInputFocus"
    },
    {
        "key": "ctrl+[",
        "command": "workbench.action.chat.stopReadChatItemAloud",
        "when": "scopedChatSynthesisInProgress"
    },
    {
        "key": "ctrl+[",
        "command": "workbench.action.closeQuickOpen",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+[",
        "command": "workbench.action.hideComment",
        "when": "commentEditorFocused || commentFocused"
    },
    {
        "key": "ctrl+[",
        "command": "workbench.action.terminal.hideSuggestWidget",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen && terminalSuggestWidgetVisible || terminalFocus && terminalIsOpen && terminalProcessSupported && terminalSuggestWidgetVisible"
    },
    {
        "key": "ctrl+[",
        "command": "workbench.actions.workbench.panel.output.clearFilterText",
        "when": "outputFilterFocus"
    },
    {
        "key": "ctrl+[",
        "command": "workbench.banner.focusBanner",
        "when": "bannerFocused"
    },
    {
        "key": "ctrl+[",
        "command": "workbench.statusBar.clearFocus",
        "when": "statusBarFocused"
    },
    {
        "key": "ctrl+[",
        "command": "scm.clearInput",
        "when": "scmRepository && !editorHasSelection && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+[",
        "command": "workbench.action.toggleSidebarVisibility",
        "when": "sideBarVisible"
    },
    {
        "key": "ctrl-w ctrl-v",
        "command": "workbench.action.splitEditorLeft",
        "when": "vim.mode === 'Normal' && editorTextFocus"
    },
    {
        "key": "ctrl-w ctrl-s",
        "command": "workbench.action.splitEditorUp",
        "when": "vim.mode === 'Normal' && editorTextFocus"
    },
    {
        "key": "ctrl-w ctrl-w",
        "command": "workbench.action.navigateLast",
        "when": "vim.mode === 'Normal' && editorTextFocus"
    },
    {
        "key": "shift+alt+l",
        "command": "workbench.action.increaseViewWidth"
    },
    {
        "key": "shift+alt+j",
        "command": "workbench.action.decreaseViewHeight"
    },
    {
        "key": "shift+alt+k",
        "command": "workbench.action.increaseViewHeight"
    },
    {
        "key": "shift+alt+h",
        "command": "workbench.action.decreaseViewHeight"
    },
    {
        "key": "alt+l",
        "command": "workbench.action.navigateRight"
    },
    {
        "key": "alt+j",
        "command": "workbench.action.navigateDown"
    },
    {
        "key": "alt+k",
        "command": "workbench.action.navigateUp"
    },
    {
        "key": "alt+h",
        "command": "workbench.action.navigateLeft"
    },
    {
        "key": "tab",
        "command": "-editor.action.inlineSuggest.commit",
        "when": "inlineEditIsVisible && tabShouldAcceptInlineEdit && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || inlineEditIsVisible && inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible || inlineEditIsVisible && inlineSuggestionVisible && tabShouldAcceptInlineEdit && !editorHoverFocused && !editorTabMovesFocus && !suggestWidgetVisible"
    },
    {
        "key": "tab",
        "command": "-editor.action.inlineSuggest.commit",
        "when": "inInlineEditsPreviewEditor"
    },
    {
        "key": "ctrl+l",
        "command": "jumpToNextSnippetPlaceholder",
        "when": "hasNextTabstop && inSnippetMode && textInputFocus"
    },
    {
        "key": "tab",
        "command": "-jumpToNextSnippetPlaceholder",
        "when": "hasNextTabstop && inSnippetMode && textInputFocus"
    },
    {
        "key": "tab",
        "command": "-insertSnippet",
        "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode"
    },
    {
        "key": "tab",
        "command": "-insertNextSuggestion",
        "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "tab",
        "command": "-insertBestCompletion",
        "when": "atEndOfWord && textInputFocus && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "ctrl+n",
        "command": "-workbench.action.files.newUntitledFile"
    },
    {
        "key": "ctrl+h",
        "command": "jumpToPrevSnippetPlaceholder",
        "when": "hasPrevTabstop && inSnippetMode && textInputFocus"
    },
    {
        "key": "shift+tab",
        "command": "-jumpToPrevSnippetPlaceholder",
        "when": "hasPrevTabstop && inSnippetMode && textInputFocus"
    },
    {
        "key": "shift+tab",
        "command": "-insertPrevSuggestion",
        "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "ctrl+j",
        "command": "editor.action.insertSnippet",
        "args": {
            "snippet": "\n\t$0\n"
        },
        "when": "editorTextFocus && vim.mode === 'Insert'"
    }
]
